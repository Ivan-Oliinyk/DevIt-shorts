Стандартные объекты (по категориям)
  Значения
    Infinity
    NaN
    undefined
    null
  
  Функции
  Глобальные функции, возвращающие результат определённой подпрограммы.

    eval() - (приводит строковое выражение к числу)
    uneval() - (приводит числовое выражение к строке)
    isFinite() - (определяет, является ли переданное значение конечным числом)
    isNaN() - (определяет является ли литерал или переменная нечисловым значением (NaN))
    parseFloat() - (принимает строку в качестве аргумента и возвращает десятичное число (число с плавающей точкой))
    parseInt() - (принимает строку в качестве аргумента и возвращает целое число в соответствии с указанным основанием системы счисления.)
    decodeURI() - (декодирует унифицированный идентификатор ресурса (URI), созданный при помощи метода encodeURI или другой подобной процедуры.)
    decodeURIComponent() - 
    encodeURI()
    encodeURIComponent()
    escape() - (возвращает новую строку, в которой определённые символы заменены шестнадцатеричной управляющей последовательностью.
                Используйте методы encodeURI или encodeURIComponent вместо него.)
                
    unescape() - (создаёт новую строку в которой шестнадцатеричная последовательность символов вида %xx заменяется эквивалентами из кодировки ASCII.)
    
 Фундаментальные объекты
 Общие языковые объекты, функции и ошибки.
    Object
    Function
    Boolean
    Symbol
    Error
    EvalError
    InternalError
    RangeError
    ReferenceError
    SyntaxError
    TypeError
    URIError
    
 РАБОТА СО СТРОКАМИ
   1) charAt -> тоже самое что и вызов через index[]; исключение только яляется если вызывать не существующий элемент 
             пример(let str = 'tom' вызов str[10] => undefined, вызов str.charAt(10) вернет пустую строку)
             
   2) concat -> для соединения строк  между собой, но с целью лучшей производительности лучше применять оператор сложения +
   
   3) includes -> проверяет, содержит ли строка заданную подстроку, и возвращает, соответственно true или false
   
   4) indexOf -> str.indexOf(searchValue, [fromIndex]) озвращает индекс первого вхождения указанного значения в строковый объект String, 
                 на котором он был вызван, начиная с индекса fromIndex. Возвращает -1, если значение не найдено.
                 
   5) lastIndexOf -> str.lastIndexOf(searchValue[, fromIndex]) возвращает индекс последнего вхождения указанного значения в строковый объект String, 
                     на котором он был вызван, или -1, если ничего не было найдено.
                     
   6) match -> возвращает получившиеся совпадения при сопоставлении строки с регулярным выражением.
               (возвращает массив, если нету совпадений то вернет null)
   
   7) search -> для поиска совпадений используя регулярные выраженияю. 
                Bозвращает индекс первого сопоставления с регулярным выражением внутри строки. 
                В противном случае метод вернёт -1.
   
   8) replace ->  возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель. Шаблон может быть строкой или регулярным выражением, 
                  а заменитель может быть строкой или функцией, вызываемой при каждом сопоставлении.
                  str.replace(regexp|substr, newSubStr|function[, flags])
                  
   
   9) substring -> возвращает указанное количество символов из строки, начиная с указанной позиции
   
   10) slice -> извлекает часть строки и возвращает новую строку без изменения оригинальной строки. slice(beginIndex[, endIndex]) 
                (Можно использовать отрицательные значения)
                
   11) split ->  возвращает новый массив str.split([separator[, limit]]) (при использовании отрицательного значения вернет все)
   
   12) repeat -> конструирует и возвращает новую строку, содержащую указанное количество соединённых вместе копий строки, на которой он был вызван.
                 str.repeat(count)
   
   13) trim -> удаляет пробельные символы с начала и конца строки. 
   
   
РАБОТА С ЧИСЛАМИ

  1) parseFloat() -> принимает строку в качестве аргумента и возвращает десятичное число (число с плавающей точкой)
                  (Урезает все что не является числом) 
                  parseFloat('0.32px') => 0.32 
                  
  2) parseInt() -> урезает строку в качестве аргумента и возвращает целое число
                parseInt('234.12px') => 234
  
  3) isNaN() ->  определяет является ли литерал или переменная нечисловым значением (NaN)  
  
  4) toFixed() ->  форматирует число, используя запись с фиксированной запятой.
  
  5) toLocaleString() -> возвращает строку с языкозависимым представлением числа.
  
  6) toPrecision() ->  возвращает строку, представляющую объект Number с указанной точностью.
  
  7) ceil -> округляет в большую сторону
  
  8) floor -> округляет в меньшую сторону
  
  9) round -> округляет как надо ( 5 < в низ 5и выше вверх) 
  
  10) random -> генерит слоучайное число от 0 до 1 не включитльно 
                Math.round(Math.random () * (max - min) + min) (генерит случайное число от min до max)
  
  11) min ->  находит минимальное число
  
  12) max ->  находит максимальное число
  
  13) abs -> возвращает абсолютное значение числа. то есть
  
  14) sing -> возвращает знак числа, указывающий на то, является ли число отрицательным, положительным или нулём.
  
РАБОТА С МАССИВАМИ

  1) isArray -> возвращает true, если объект является массивом и false, если он массивом не является.
  
  2) pop -> удаляет последний элемент из массива и возвращает его значение.
  
  3) push -> добавляет один или более элементов в конец массива и возвращает новую длину массива.
  
  4) reverse -> разварачивает массив
  
  5) shift -> удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.
  
  6) sort -> на месте сортирует элементы массива и возвращает отсортированный массив.
              const arr = [11, 1, 2, 21, 3, 5, 7, 8]
              const compareNumber = (a, b) => a - b
              const compareNumberRevers = (a, b) => b - a
              console.log(arr.sort()); // [1, 11, 2, 21, 3, 5, 7, 8]
              console.log(arr.sort(compareNumber)); // [1, 2, 3, 5, 7, 8, 11, 21]
              console.log(arr.sort(compareNumberRevers)); // [21, 11, 8, 7, 5, 3, 2, 1]

  7) splice -> изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
  
  8) slice -> возвращает новый массив, содержащий копию части исходного массива.
  
  9) join ->  объединяет все элементы массива (или массивоподобного объекта) в строку.
  
  10) concat -> возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, 
                переданными в качестве аргументов.
  
  11) includes -> определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false.
  
  12) indexOf ->  возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.
  
  13) lastIndexOf -> возвращает последний индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет. 
                     Массив просматривается от конца к началу, начиная с индекса fromIndex.
                     arr.lastIndexOf(searchElement[, fromIndex = arr.length])
  
  14) every ->  проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
                console.log(arr.every(e => e > 0))
                console.log(arr.every(e => e > 1))
  
  15) filter -> создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.
                console.log(arr.filter(elem => elem > 10))
  
  16) map ->  создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
              
  
  17) forEach -> выполняет указанную функцию один раз для каждого элемента в массиве.
  
  18) reduce -> применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.
                const arr = [11, 1, 2, 21, 3, 5, 7, 8]
                let sum = arr.reduce((acc, item) => {
                            return acc + item
                          }, 0)
                console.log(sum)
                
  Доп
  
  19) 
                
  
  
  
  
  
  
  
