Когда контейнер умирает, все данные,  которые он создал (журналы, базы данных записи и т.д.) умирают вмести с ним.
Тома(Volumes) - внешнее хранилище области, используемые для хранения данных проиводится контейнером docker.
Тома могут быть расположены на хочт docker или даже на удаленной машине.
По умолчанию тома не удаляются при остановке контейнера. Обьем данных могут быть разделены между контейнерами.
Тома можно монтировать в режиме только для чтения. 
--volume: создать файл или каталог, если он не находиться в docker host.
--mount: не создает его автоматически, но генерирует ошибку.

Создать том:
docker volume create volume-name

Список томов:
docker volume ls

Просмотреть том:
docker volume inspect volume-name 

Удалить том:
docker volume rm volume-name

Удалить все неиспользуемые локальные тома:
docker volume prune

Все тома(volume) храняться в директории
/var/libs/docker/volumes

1)ПРИМЕР ИСПОЛЬЗОВАНИЯ #1 (Обьявление тома при запуске контейнера)
  Создаем том 
    docker volume create my-volume
  
  Для примера созданем контейнер 
    docker run -it -v my-volume:/data --name container-1 lorf91/cowsay
      где 
        docker run -it ->(создание контейнера в инетрактивном режиме (тоесть мы остаемся в нем посел его запуска))
        -v my-volume:/data -> (создаем том my-volume в директории /data)
        --name container-1 ->(задаем имя контейнера (container-1))
        lorf91/cowsay -> образ с докерхаб
        
    находясь в контейнере переходим в data
    cd /data
    смотрим список файлов (ll, ls , ls -a, ls -all) и видим что директория пустая
    создаем файл -> (touch file-new-77)
    проверям и видим что фал есть
    
    Далее создаем еще один контейнер выполняем все шаги заного
      docker run -it -v my-volume:/data --name container-2 lorf91/cowsay
    Переходим в директорию data 
    cd /data
    Проверям список файлов (ls) и мы увидим  файл file-new-77 
    Если создать доп файлы или изменить текущие то все изменения произойдут и на другом контейнере
    

2)ПРИМЕР ИСПОЛЬЗОВАНИЯ №2 (В Dockerfile => VOLUME )
  VOLUME docker run -v my-volume:/data ...........
  
  
3)ПРИМЕР ИСПОЛЬЗОВАНИЯ №3 
  (Раширении в рашринении аргумента docker run с явным указанием связываемого каталога)
  (директория_на_пк:в_контейнере)
  (/home/ivan/data:/data)

4)ПРИМЕР ИСПОЛЬЗОВАНИЯ #4 (В связке c docker-compose)
    В папке с проэктом создаем папки с названиями образов
    получаем такую структуру
      project
        adminer ->(папка для докерфайла админера)
          Dockerfile -> (докерфайл админера)
        db -> (папка для докерфайла базы данных )
          Dockerfile -> (докерфайл базы данных)
        databeses -> (папка для хранения базы данных из хоста)
        docker-compose.yml -> (файл докер-компосе)

     docker-compose.yml имеет структуру 
     version: "3.1"
        services:
          db:
            build: ./db
            restart: always
            environment:
              MYSQL_ROOT_PASSWORD: 444444
            volumes:
              - ./databases:/var/lib/mysql  (указываем где будет хранится база данных хоста на локальном компьютере)

          adminer:
            build: ./adminer
            restart: always
            ports:
              - 9090:8080

       Команды для билда 
           docker-compose build
           docker-compose up -d 



  
    
    
